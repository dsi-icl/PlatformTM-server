// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlatformTM.Data;

#nullable disable

namespace PlatformTM.Data.Migrations
{
    [DbContext(typeof(PlatformTMdbContext))]
    [Migration("20221112171316_update12NOV")]
    partial class update12NOV
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AssessmentPrimaryDataset", b =>
                {
                    b.Property<int>("AssessmentsId")
                        .HasColumnType("int");

                    b.Property<int>("DatasetsId")
                        .HasColumnType("int");

                    b.HasKey("AssessmentsId", "DatasetsId");

                    b.HasIndex("DatasetsId");

                    b.ToTable("AssessmentPrimaryDataset");
                });

            modelBuilder.Entity("CohortStudy", b =>
                {
                    b.Property<string>("CohortsId")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("StudiesId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "StudiesId");

                    b.HasIndex("StudiesId");

                    b.ToTable("CohortStudy");
                });

            modelBuilder.Entity("PlatformTM.Core.Application.AccountManagement.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("UserAccountId");

                    b.Property<bool>("AdminApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PSK")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Application.AccountManagement.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CalimId");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserAccountClaims", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.HasIndex("TimeEventId");

                    b.ToTable("Assessment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Assessment");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Biosample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BioSampleDBId");

                    b.Property<int>("AssayId")
                        .HasColumnType("int");

                    b.Property<string>("BiosampleStudyId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CollectionDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CollectionStudyDayId")
                        .HasColumnType("int");

                    b.Property<int?>("CollectionStudyTimePointId")
                        .HasColumnType("int");

                    b.Property<int?>("DataFileId")
                        .HasColumnType("int");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBaseline")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssayId");

                    b.HasIndex("CollectionStudyDayId")
                        .IsUnique();

                    b.HasIndex("CollectionStudyTimePointId")
                        .IsUnique();

                    b.HasIndex("DataFileId");

                    b.HasIndex("StudyId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("VisitId")
                        .IsUnique();

                    b.ToTable("BioSamples", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CharacteristicId");

                    b.Property<string>("CVtermId")
                        .HasColumnType("varchar(127)");

                    b.Property<int>("CharacteristicFeatureId")
                        .HasColumnType("int");

                    b.Property<string>("ControlledValueStr")
                        .HasColumnType("longtext");

                    b.Property<int?>("DatafileId")
                        .HasColumnType("int");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VerbatimName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CharacObjName");

                    b.Property<string>("VerbatimValue")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CVtermId");

                    b.HasIndex("CharacteristicFeatureId");

                    b.HasIndex("DatafileId");

                    b.ToTable("Characteristics", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Characteristic");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.CharacteristicFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CharacteristicObjId");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CVtermId")
                        .HasColumnType("varchar(127)");

                    b.Property<string>("DataType")
                        .HasColumnType("longtext");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CVtermId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CharacteristicObjects", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)")
                        .HasColumnName("OID");

                    b.Property<string>("Code")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("Definition")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("DictionaryId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("IsUserSpecified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("Synonyms")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("XrefId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.HasIndex("XrefId");

                    b.ToTable("CVterms", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.DB", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Name");

                    b.Property<string>("Url")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)")
                        .HasColumnName("URL");

                    b.Property<string>("UrlPrefix")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)")
                        .HasColumnName("URLPrefix");

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.ToTable("Dbs", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.Dbxref", b =>
                {
                    b.Property<string>("OID")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("Accession")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DBId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.HasKey("OID");

                    b.HasIndex("DBId");

                    b.ToTable("DBxreferences", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.Dictionary", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("Definition")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("XrefId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("XrefId");

                    b.ToTable("Dictionaries", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DatasetModel.DataFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataFileId");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Created")
                        .HasColumnType("longtext");

                    b.Property<int?>("DatasetId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int")
                        .HasColumnName("ParentId");

                    b.Property<string>("Format")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDirectory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsLoadedToDB")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Modified")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("DatasetId");

                    b.HasIndex("FolderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DataFiles", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .HasColumnType("longtext");

                    b.Property<string>("Created")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DescriptorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext");

                    b.Property<string>("Modified")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PrimaryDataset");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DesignElements.Cohort", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("CohortId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CohortCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CohortName");

                    b.HasKey("Id");

                    b.ToTable("Cohorts", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DesignElements.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VisitId");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Name");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int>("StudyDayId")
                        .HasColumnType("int");

                    b.Property<int>("StudyId")
                        .HasColumnType("int")
                        .HasColumnName("StudyId");

                    b.HasKey("Id");

                    b.HasIndex("StudyDayId")
                        .IsUnique();

                    b.HasIndex("StudyId");

                    b.ToTable("Visits", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.HumanSubject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("SubjectDBId");

                    b.Property<string>("CohortId")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceDatafileId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StudyCohortId")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubjectEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SubjectStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubjectStudyId")
                        .HasColumnType("longtext");

                    b.Property<string>("UniqueSubjectId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CohortId");

                    b.HasIndex("DatasetId");

                    b.HasIndex("SourceDatafileId");

                    b.HasIndex("StudyCohortId");

                    b.HasIndex("StudyId");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    b.Property<string>("Accession")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudyId");

                    b.Property<string>("Accession")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Site")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Studies", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Templates.DatasetTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<string>("Class")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("Code")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("Description")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("Domain")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<bool>("IsRepeating")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Structure")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.HasKey("Id");

                    b.ToTable("DomainTemplates", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Templates.DatasetTemplateField", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OID");

                    b.Property<bool>("AllowMultipleValues")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ControlledVocabularyId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CVTermsDictionaryId");

                    b.Property<string>("DataType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("QualifiersDictionaryId")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("RoleTermId");

                    b.Property<string>("Section")
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UsageId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("UsageTermId");

                    b.HasKey("Id");

                    b.HasIndex("ControlledVocabularyId");

                    b.HasIndex("QualifiersDictionaryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UsageId");

                    b.ToTable("DomainTemplateVariables", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Timing.TimePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimePoints", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("TimePoint");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Organization")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PlatformTM.Core.JoinEntities.TemplateFieldDB", b =>
                {
                    b.Property<string>("TemplateFieldId")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TermSourceId")
                        .HasColumnType("varchar(10)");

                    b.HasKey("TemplateFieldId", "TermSourceId");

                    b.HasIndex("TermSourceId");

                    b.ToTable("TemplateField_TermSource", (string)null);
                });

            modelBuilder.Entity("PrimaryDatasetStudy", b =>
                {
                    b.Property<int>("PrimaryDatasetsId")
                        .HasColumnType("int");

                    b.Property<int>("StudiesId")
                        .HasColumnType("int");

                    b.HasKey("PrimaryDatasetsId", "StudiesId");

                    b.HasIndex("StudiesId");

                    b.ToTable("PrimaryDatasetStudy");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("AffiliatedProjectsId")
                        .HasColumnType("int");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("char(36)");

                    b.HasKey("AffiliatedProjectsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Assay", b =>
                {
                    b.HasBaseType("PlatformTM.Core.Domain.Model.Assessment");

                    b.Property<string>("DesignTypeId")
                        .HasColumnType("varchar(127)");

                    b.Property<string>("MeasurementTypeId")
                        .HasColumnType("varchar(127)");

                    b.Property<string>("TechnologyPlatformId")
                        .HasColumnType("varchar(127)");

                    b.Property<string>("TechnologyTypeId")
                        .HasColumnType("varchar(127)");

                    b.HasIndex("DesignTypeId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("TechnologyPlatformId");

                    b.HasIndex("TechnologyTypeId");

                    b.HasDiscriminator().HasValue("Assay");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.SampleCharacteristic", b =>
                {
                    b.HasBaseType("PlatformTM.Core.Domain.Model.Characteristic");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.HasIndex("SampleId");

                    b.HasDiscriminator().HasValue("SampleCharacteristic");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.SubjectCharacteristic", b =>
                {
                    b.HasBaseType("PlatformTM.Core.Domain.Model.Characteristic");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(95)");

                    b.HasIndex("SubjectId");

                    b.HasDiscriminator().HasValue("SubjectCharacteristic");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Timing.AbsoluteTimePoint", b =>
                {
                    b.HasBaseType("PlatformTM.Core.Domain.Model.Timing.TimePoint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.HasDiscriminator().HasValue("AbsoluteTimePoint");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Timing.RelativeTimePoint", b =>
                {
                    b.HasBaseType("PlatformTM.Core.Domain.Model.Timing.TimePoint");

                    b.Property<int?>("ReferenceTimePointId")
                        .HasColumnType("int");

                    b.HasIndex("ReferenceTimePointId");

                    b.HasDiscriminator().HasValue("RelativeTimePoint");
                });

            modelBuilder.Entity("AssessmentPrimaryDataset", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Assessment", null)
                        .WithMany()
                        .HasForeignKey("AssessmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", null)
                        .WithMany()
                        .HasForeignKey("DatasetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CohortStudy", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.DesignElements.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.Study", null)
                        .WithMany()
                        .HasForeignKey("StudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformTM.Core.Application.AccountManagement.UserAccount", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatformTM.Core.Application.AccountManagement.UserClaim", b =>
                {
                    b.HasOne("PlatformTM.Core.Application.AccountManagement.UserAccount", "UserAccount")
                        .WithMany("Claims")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Assessment", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Study", "Study")
                        .WithMany("Assessments")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.DesignElements.Visit", "TimeEvent")
                        .WithMany()
                        .HasForeignKey("TimeEventId");

                    b.Navigation("Study");

                    b.Navigation("TimeEvent");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Biosample", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Assay", "Assay")
                        .WithMany()
                        .HasForeignKey("AssayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.Timing.RelativeTimePoint", "CollectionStudyDay")
                        .WithOne()
                        .HasForeignKey("PlatformTM.Core.Domain.Model.Biosample", "CollectionStudyDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlatformTM.Core.Domain.Model.Timing.RelativeTimePoint", "CollectionStudyTimePoint")
                        .WithOne()
                        .HasForeignKey("PlatformTM.Core.Domain.Model.Biosample", "CollectionStudyTimePointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.DataFile", "DataFile")
                        .WithMany()
                        .HasForeignKey("DataFileId");

                    b.HasOne("PlatformTM.Core.Domain.Model.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.HumanSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("PlatformTM.Core.Domain.Model.DesignElements.Visit", "Visit")
                        .WithOne()
                        .HasForeignKey("PlatformTM.Core.Domain.Model.Biosample", "VisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Assay");

                    b.Navigation("CollectionStudyDay");

                    b.Navigation("CollectionStudyTimePoint");

                    b.Navigation("DataFile");

                    b.Navigation("Study");

                    b.Navigation("Subject");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Characteristic", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "ControlledValue")
                        .WithMany()
                        .HasForeignKey("CVtermId");

                    b.HasOne("PlatformTM.Core.Domain.Model.CharacteristicFeature", "CharacteristicFeature")
                        .WithMany()
                        .HasForeignKey("CharacteristicFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.DataFile", "Datafile")
                        .WithMany()
                        .HasForeignKey("DatafileId")
                        .HasConstraintName("FK_Characteristic_DataFile");

                    b.Navigation("CharacteristicFeature");

                    b.Navigation("ControlledValue");

                    b.Navigation("Datafile");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.CharacteristicFeature", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "ControlledTerm")
                        .WithMany()
                        .HasForeignKey("CVtermId");

                    b.HasOne("PlatformTM.Core.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlledTerm");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.Dictionary", "Dictionary")
                        .WithMany("Terms")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.Dbxref", "Xref")
                        .WithMany()
                        .HasForeignKey("XrefId");

                    b.Navigation("Dictionary");

                    b.Navigation("Xref");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.Dbxref", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.DB", "DB")
                        .WithMany()
                        .HasForeignKey("DBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DB");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.Dictionary", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.Dbxref", "Xref")
                        .WithMany()
                        .HasForeignKey("XrefId");

                    b.Navigation("Xref");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DatasetModel.DataFile", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId");

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", "Dataset")
                        .WithMany("DataFiles")
                        .HasForeignKey("DatasetId");

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.DataFile", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("PlatformTM.Core.Domain.Model.Project", "Project")
                        .WithMany("DataFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Dataset");

                    b.Navigation("Folder");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DesignElements.Visit", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Timing.RelativeTimePoint", "StudyDay")
                        .WithOne()
                        .HasForeignKey("PlatformTM.Core.Domain.Model.DesignElements.Visit", "StudyDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.Study", "Study")
                        .WithMany("TimeEvents")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Study");

                    b.Navigation("StudyDay");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.HumanSubject", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.DesignElements.Cohort", null)
                        .WithMany("Subjects")
                        .HasForeignKey("CohortId");

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", "Dataset")
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.DataFile", "SourceDataFile")
                        .WithMany()
                        .HasForeignKey("SourceDatafileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.DesignElements.Cohort", "StudyCohort")
                        .WithMany()
                        .HasForeignKey("StudyCohortId");

                    b.HasOne("PlatformTM.Core.Domain.Model.Study", "Study")
                        .WithMany("Subjects")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");

                    b.Navigation("SourceDataFile");

                    b.Navigation("Study");

                    b.Navigation("StudyCohort");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Project", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Study", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Project", "Project")
                        .WithMany("Studies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Templates.DatasetTemplateField", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.Dictionary", "ControlledVocabulary")
                        .WithMany()
                        .HasForeignKey("ControlledVocabularyId");

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.Dictionary", "QualifiersDictionary")
                        .WithMany()
                        .HasForeignKey("QualifiersDictionaryId");

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("PlatformTM.Core.Domain.Model.Templates.DatasetTemplate", "Template")
                        .WithMany("Fields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId");

                    b.Navigation("ControlledVocabulary");

                    b.Navigation("QualifiersDictionary");

                    b.Navigation("Role");

                    b.Navigation("Template");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("PlatformTM.Core.JoinEntities.TemplateFieldDB", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Templates.DatasetTemplateField", "TemplateField")
                        .WithMany("FieldTermSources")
                        .HasForeignKey("TemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TemplateField_TermSource");

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.DB", "TermSource")
                        .WithMany()
                        .HasForeignKey("TermSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TermSource_TemplateField");

                    b.Navigation("TemplateField");

                    b.Navigation("TermSource");
                });

            modelBuilder.Entity("PrimaryDatasetStudy", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", null)
                        .WithMany()
                        .HasForeignKey("PrimaryDatasetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.Study", null)
                        .WithMany()
                        .HasForeignKey("StudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Project", null)
                        .WithMany()
                        .HasForeignKey("AffiliatedProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformTM.Core.Domain.Model.Users.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Assay", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "DesignType")
                        .WithMany()
                        .HasForeignKey("DesignTypeId");

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId");

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "TechnologyPlatform")
                        .WithMany()
                        .HasForeignKey("TechnologyPlatformId");

                    b.HasOne("PlatformTM.Core.Domain.Model.ControlledTerminology.CVterm", "TechnologyType")
                        .WithMany()
                        .HasForeignKey("TechnologyTypeId");

                    b.Navigation("DesignType");

                    b.Navigation("MeasurementType");

                    b.Navigation("TechnologyPlatform");

                    b.Navigation("TechnologyType");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.SampleCharacteristic", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Biosample", "Sample")
                        .WithMany("SampleCharacteristics")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.SubjectCharacteristic", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.HumanSubject", "Subject")
                        .WithMany("SubjectCharacteristics")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Timing.RelativeTimePoint", b =>
                {
                    b.HasOne("PlatformTM.Core.Domain.Model.Timing.TimePoint", "ReferenceTimePoint")
                        .WithMany()
                        .HasForeignKey("ReferenceTimePointId");

                    b.Navigation("ReferenceTimePoint");
                });

            modelBuilder.Entity("PlatformTM.Core.Application.AccountManagement.UserAccount", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Biosample", b =>
                {
                    b.Navigation("SampleCharacteristics");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.ControlledTerminology.Dictionary", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DatasetModel.PDS.PrimaryDataset", b =>
                {
                    b.Navigation("DataFiles");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.DesignElements.Cohort", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.HumanSubject", b =>
                {
                    b.Navigation("SubjectCharacteristics");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Project", b =>
                {
                    b.Navigation("DataFiles");

                    b.Navigation("Studies");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Study", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Subjects");

                    b.Navigation("TimeEvents");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Templates.DatasetTemplate", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("PlatformTM.Core.Domain.Model.Templates.DatasetTemplateField", b =>
                {
                    b.Navigation("FieldTermSources");
                });
#pragma warning restore 612, 618
        }
    }
}
